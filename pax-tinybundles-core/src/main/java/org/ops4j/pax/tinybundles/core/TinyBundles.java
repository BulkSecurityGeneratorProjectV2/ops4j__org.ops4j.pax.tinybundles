package org.ops4j.pax.tinybundles.core;import java.io.InputStream;import org.ops4j.pax.tinybundles.core.builders.BndBuilder;import org.ops4j.pax.tinybundles.core.builders.SynchronousRawBuilder;import org.ops4j.pax.tinybundles.core.intern.DefaultTinybundleProvider;import org.ops4j.store.Store;import org.ops4j.store.StoreFactory;/** * Statically usable Tinybundles API. * Compatible with Pax Swissbox Tinybundles 1.x releases. */public class TinyBundles {    private static Store<InputStream> m_store = StoreFactory.defaultStore();    /**     * Start with a fresh bundle with this factory method.     * You can then chain methodcalls thanks to the humane nature of {@link TinyBundle} interface.     *     * @param strategy     *     * @return a new instance of a  {@link TinyBundle}. This is almost always the startingpoint of any interaction with {@link TinyBundle}.     */    public static TinyBundle bundle( BuildableBundle strategy )    {        return makeProvider( strategy ).get();    }    private static DefaultTinybundleProvider makeProvider( BuildableBundle strategy )    {        return new DefaultTinybundleProvider( getStore(), strategy );    }    private static Store<InputStream> getStore()    {        return m_store;    }    public static BuildableBundle withBnd()    {        return new BndBuilder( with() );    }    public static BuildableBundle with()    {        return new SynchronousRawBuilder();     //   return new RawBuilder();    }}